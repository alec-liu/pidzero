// Generated by Haxe 3.4.7
#ifndef INCLUDED_ChildProcess
#define INCLUDED_ChildProcess

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_baacac1fce9ae4d9_29_new)
HX_DECLARE_CLASS0(ChildProcess)
HX_DECLARE_CLASS2(sys,io,Process)



class HXCPP_CLASS_ATTRIBUTES ChildProcess_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ChildProcess_obj OBJ_;
		ChildProcess_obj();

	public:
		enum { _hx_ClassId = 0x008b251b };

		void __construct(::String name,::String command,bool vital,int replicas,::String comments);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="ChildProcess")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"ChildProcess"); }

		hx::ObjectPtr< ChildProcess_obj > __new(::String name,::String command,bool vital,int replicas,::String comments) {
			hx::ObjectPtr< ChildProcess_obj > __this = new ChildProcess_obj();
			__this->__construct(name,command,vital,replicas,comments);
			return __this;
		}

		static hx::ObjectPtr< ChildProcess_obj > __alloc(hx::Ctx *_hx_ctx,::String name,::String command,bool vital,int replicas,::String comments) {
			ChildProcess_obj *__this = (ChildProcess_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ChildProcess_obj), true, "ChildProcess"));
			*(void **)__this = ChildProcess_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_baacac1fce9ae4d9_29_new)
HXLINE(  31)		( ( ::ChildProcess)(__this) )->name = name;
HXLINE(  32)		( ( ::ChildProcess)(__this) )->command = command;
HXLINE(  33)		( ( ::ChildProcess)(__this) )->vital = vital;
HXLINE(  34)		( ( ::ChildProcess)(__this) )->replicas = replicas;
HXLINE(  35)		( ( ::ChildProcess)(__this) )->comments = comments;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ChildProcess_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("ChildProcess","\x53","\x18","\x29","\x82"); }

		::String name;
		int pid;
		::String command;
		bool vital;
		int replicas;
		::String comments;
		bool pidstatus;
		int rc;
		 ::sys::io::Process p;
		void start();
		::Dynamic start_dyn();

		void status();
		::Dynamic status_dyn();

};


#endif /* INCLUDED_ChildProcess */ 
